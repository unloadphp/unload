---
# Copyright 2018 widdix GmbH
# Modification Copyright 2022 unload.sh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Distribution: combining S3, CloudFront and Route53'
Parameters:
  DistributionName:
    Description: 'Distribution Name'
    Type: String
    Default: ''
  PipelineRoleArn:
    Description: 'Pipeline role ARN'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentS3StackAccessLog:
    Description: 'Optional stack name of parent s3 stack based on state/s3.yaml template (with Access set to ElbAccessLogWrite) to store access logs.'
    Type: String
    Default: ''
  ParentWAFStack:
    Description: 'Optional stack name of parent WAF stack based on the security/waf.yaml template.'
    Type: String
    Default: ''
  EndpointOriginDomain:
    Description: 'Optional domain for http origin.'
    Type: String
    Default: ''
  EndpointOriginPath:
    Description: 'Optional path for http origin.'
    Type: String
    Default: ''
  Domains:
    Description: 'Optional domains list for cloudfront aliases'
    Type: String
    Default: ''
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN or IAM Certificate ID. Certificate must be created in the us-east-1 region!'
    Type: String
    Default: ''
  GeoRestrictionLocations:
    Description: 'Optional ISO2 countries list for geo restrictions in Cloudfront distribution'
    Type: String
    Default: ''
  GeoRestrictionType:
    Description: 'Optional geo restction type in Cloudfront distribution'
    Type: String
    Default: none
    AllowedValues: [ none, whitelist, blacklist ]
  DefaultErrorPagePath:
    Description: 'Optional path of the error page for the website (e.g. /error.html).'
    Type: String
    Default: ''
  DefaultErrorResponseCode:
    Description: 'The HTTP status code that you want to return along with the error page (requires DefaultErrorPagePath).'
    Type: String
    Default: '404'
    AllowedValues: [ '200', '404' ]
Conditions:
  HasS3Bucket: !Not [ !Equals [ !Ref ParentS3StackAccessLog, '' ] ]
  HasCertificate: !Not [ !Equals [ !Ref ExistingCertificate, '' ] ]
  HasWAF: !Not [ !Equals [ !Ref ParentWAFStack, '' ] ]
  HasDefaultErrorPagePath: !Not [ !Equals [ !Ref DefaultErrorPagePath, '' ] ]
  HasAlertTopic: !Not [ !Equals [ !Ref ParentAlertStack, '' ] ]
  HasRegionNorthVirginia: !Equals [ !Ref 'AWS::Region', 'us-east-1' ]
  HasAlertTopicAndRegionNorthVirginia: !And [ !Condition HasAlertTopic, !Condition HasRegionNorthVirginia ]
  HasGeoRestiction: !Not [ !Equals [ !Ref GeoRestrictionType, none] ]
Resources:
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: "Retain"
    Properties:
      PublicAccessBlockConfiguration: # AWS Foundational Security Best Practices v1.0.0 S3.8
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Sid: AllowReadWriteByPipelineUser
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'
            Principal:
              AWS: !Ref PipelineRoleArn
          - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt 'AssetsBucket.Arn'
              - !Sub '${AssetsBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref DistributionName
  CloudfrontRequestFunction:
    Type: 'AWS::CloudFront::Function'
    Properties:
      Name: !Sub "${DistributionName}-RequestFunction"
      AutoPublish: true
      FunctionConfig:
        Comment: 'Append x-forwarded-host header to origin request'
        Runtime: 'cloudfront-js-1.0'
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            request.headers["x-forwarded-host"] = request.headers["host"];
            return request;
        }
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases: !If
          - HasCertificate
          - !Split [',', !Ref Domains]
          - []
        Comment: !Ref DistributionName
        CustomErrorResponses: !If
          - HasDefaultErrorPagePath
          - - ErrorCode: 403 # 403 from S3 indicates that the file does not exists
              ResponseCode: !Ref DefaultErrorResponseCode
              ResponsePagePath: !Ref DefaultErrorPagePath
          - [ ]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
            Headers:
              - "Accept"
              - "Accept-Language"
              - "Content-Type"
              - "Origin"
              - "Referer"
              - "User-Agent"
              - "X-Requested-With"
              - "X-Forwarded-Host"
          TargetOriginId: endpointorigin
          ViewerProtocolPolicy: 'redirect-to-https'
          FunctionAssociations:
            - EventType: 'viewer-request'
              FunctionARN: !GetAtt CloudfrontRequestFunction.FunctionARN
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 3600 # in seconds
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400 # in seconds
            MinTTL: 60 # in seconds
            TargetOriginId: s3origin
            PathPattern: /assets/*
            ViewerProtocolPolicy: 'redirect-to-https'
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: false
            DefaultTTL: 3600
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400
            MinTTL: 60
            TargetOriginId: s3origin
            PathPattern: /favicon.ico
            ViewerProtocolPolicy: 'redirect-to-https'
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: false
            DefaultTTL: 3600
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400
            MinTTL: 60
            TargetOriginId: s3origin
            PathPattern: /robots.txt
            ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging: !If [ HasS3Bucket, { Bucket: { 'Fn::ImportValue': !Sub '${ParentS3StackAccessLog}-BucketDomainName' }, Prefix: !Ref 'AWS::StackName' }, !Ref 'AWS::NoValue' ]
        Origins:
          - DomainName: !GetAtt 'AssetsBucket.RegionalDomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          - DomainName: !Ref EndpointOriginDomain
            OriginPath: !Ref EndpointOriginPath
            Id: endpointorigin
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
        PriceClass: 'PriceClass_All'
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref ExistingCertificate
            MinimumProtocolVersion: 'TLSv1.1_2016'
            SslSupportMethod: 'sni-only'
          - !Ref 'AWS::NoValue'
        Restrictions:
          GeoRestriction:
            Locations: !If [HasGeoRestiction, !Split [',', !Ref GeoRestrictionLocations], []]
            RestrictionType: !Ref GeoRestrictionType
        WebACLId: !If
          - HasWAF
          - { 'Fn::ImportValue': !Sub '${ParentWAFStack}-WebACL' }
          - !Ref 'AWS::NoValue'
Outputs:
  AssetsBucketName:
    Description: 'Name of the S3 bucket storing the static assets.'
    Value: !Ref AssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  AssetsBucketArn:
    Description: 'Arn of the S3 bucket storing the static assets.'
    Value: !GetAtt AssetsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AssetsBucketArn'
  URL:
    Description: 'URL to website.'
    Value: !GetAtt 'CloudFrontDistribution.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  DistributionId:
    Description: 'CloudFront distribution id'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
