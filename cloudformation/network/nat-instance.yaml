---
# Copyright 2018 widdix GmbH
# Modification Copyright 2022 unload.sh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: highly available NAT instance'
Parameters:
  VpcCidrBlock:
    Description: 'Vpc Cidr Block'
    Type: String
  VpcId:
    Description: 'Vpc Ref'
    Type: String
  VpcRouteTablePrivate:
    Description: 'Vpc VpcRouteTablePrivate'
    Type: String
  VpcSubnetPublic:
    Description: 'Vpc VpcSubnetPublic'
    Type: String
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  NATInstanceType:
    Description: 'Instance type of the NAT instance. Keep in mind that different instances come with different network capabilities.'
    Type: String
    Default: 't3.nano'
  BastionSecurityGroupId:
    Description: 'Security group id used for bastion ssh tunnel traffic control'
    Type: String
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]
Mappings:
  RegionMap:
    'ap-south-2':
      NATAMI: 'ami-0d252091aa195a6eb'
    'ap-south-1':
      NATAMI: 'ami-022b58402848af996'
    'eu-south-1':
      NATAMI: 'ami-0a0df1cd58326a9ee'
    'eu-south-2':
      NATAMI: 'ami-0241604a43fcdd5c0'
    'me-central-1':
      NATAMI: 'ami-0a347b220446b7455'
    'il-central-1':
      NATAMI: 'ami-0e9d233082f9a7ecd'
    'ca-central-1':
      NATAMI: 'ami-089b775f43ed829d9'
    'eu-central-1':
      NATAMI: 'ami-0987835c48a638d5c'
    'eu-central-2':
      NATAMI: 'ami-0af2013e2fc5fefa5'
    'us-west-1':
      NATAMI: 'ami-017122a265b2b84e6'
    'us-west-2':
      NATAMI: 'ami-0249fcce31b8ac991'
    'af-south-1':
      NATAMI: 'ami-0a239823fe260fe25'
    'eu-north-1':
      NATAMI: 'ami-0b1d85becad49dd65'
    'eu-west-3':
      NATAMI: 'ami-090ff51c987eaca51'
    'eu-west-2':
      NATAMI: 'ami-03ab34f3697e77802'
    'eu-west-1':
      NATAMI: 'ami-091846419ebe1075b'
    'ap-northeast-3':
      NATAMI: 'ami-06664868c74d1e4f9'
    'ap-northeast-2':
      NATAMI: 'ami-04420bca1d2dbc3d7'
    'me-south-1':
      NATAMI: 'ami-0827906823062f880'
    'ap-northeast-1':
      NATAMI: 'ami-061bc56e8a95679a4'
    'sa-east-1':
      NATAMI: 'ami-061e571b8d023e9c1'
    'ap-east-1':
      NATAMI: 'ami-08b0b1e78ba230878'
    'ap-southeast-1':
      NATAMI: 'ami-0b95fcf2f61a5622a'
    'ap-southeast-2':
      NATAMI: 'ami-0ab90dc2926e60aa2'
    'ap-southeast-3':
      NATAMI: 'ami-0f93836adea4c4135'
    'ap-southeast-4':
      NATAMI: 'ami-0a349795e6e35a8c8'
    'us-east-1':
      NATAMI: 'ami-04b00c80d404218ff'
    'us-east-2':
      NATAMI: 'ami-00e0fc8a9078602be'
Conditions:
  HasIAMUserSSHAccess: !Equals [ !Ref IAMUserSSHAccess, 'true' ]
Resources:
  NATInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn:
      - EIP
      - Route
    Properties:
      Roles:
        - !Ref NATIAMRole
  MockNetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref VpcSubnetPublic
  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref VpcRouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NetworkInterfaceId: !Ref MockNetworkInterface
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  NATSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref VpcCidrBlock
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCidrBlock
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidrBlock
      VpcId: !Ref VpcId
  BastionSecurityGroupInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasIAMUserSSHAccess
    Properties:
      GroupId: !Ref BastionSecurityGroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  NATIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Stmt1425023276000
                Effect: Allow
                Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:ModifyInstanceAttribute'
                  - 'ec2:CreateRoute'
                  - 'ec2:ReplaceRoute'
                  - 'ec2:DeleteRoute'
                Resource:
                  - '*'
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: !GetAtt 'Logs.Arn'
  NATIAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
        - !Ref NATIAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iam:ListUsers'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'iam:ListSSHPublicKeys'
              - 'iam:GetSSHPublicKey'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: !If [ HasIAMUserSSHAccess, [ awslogs, ssh-access, config ], [ awslogs, config ] ]
        awslogs:
          packages:
            yum:
              awslogs: [ ]
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - '/etc/awslogs/awslogs.conf'
                  - '/etc/awslogs/awscli.conf'
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}
                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" >/dev/null 2>&1; then
                      #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                      SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                      /usr/sbin/useradd "$SaveUserName"
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -e ''/AuthorizedKeysCommand / s/^#*/#/'' -i /etc/ssh/sshd_config; echo -e ''\nAuthorizedKeysCommand /opt/authorized_keys_command.sh'' >> /etc/ssh/sshd_config'
              test: '! grep -q ''^AuthorizedKeysCommand /opt/authorized_keys_command.sh'' /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -e ''/AuthorizedKeysCommandUser / s/^#*/#/'' -i /etc/ssh/sshd_config; echo -e ''\nAuthorizedKeysCommandUser nobody'' >> /etc/ssh/sshd_config'
              test: '! grep -q ''^AuthorizedKeysCommandUser nobody'' /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                  - 'a_configure_sshd_command'
                  - 'b_configure_sshd_commanduser'
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchTemplate
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - '/etc/cfn/cfn-hup.conf'
                  - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'

    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              Encrypted: true
              VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref NATInstanceProfile
        ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', NATAMI ]
        InstanceType: !Ref NATInstanceType
        MetadataOptions:
          HttpTokens: required
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref NATSecurityGroup
              - !Ref BastionSecurityGroupId
        UserData:
          'Fn::Base64': !Sub
            - |
              #!/bin/bash -ex
              trap '/opt/aws/bin/cfn-signal -e 1 --region ${Region} --stack ${StackName} --resource NATAutoScalingGroup' ERR
              TOKEN=$(curl --silent --max-time 60 -X PUT http://169.254.169.254/latest/api/token -H "X-aws-ec2-metadata-token-ttl-seconds: 30")
              INSTANCEID=$(curl --silent --max-time 60 -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
              aws --region ${Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIPAllocationId}
              aws --region ${Region} ec2 modify-instance-attribute --instance-id $INSTANCEID --source-dest-check "{\"Value\": false}"
              aws --region ${Region} ec2 replace-route --route-table-id ${RouteTablePrivate} --destination-cidr-block "0.0.0.0/0" --instance-id $INSTANCEID || aws --region ${Region} ec2 create-route --route-table-id ${RouteTablePrivate} --destination-cidr-block "0.0.0.0/0" --instance-id $INSTANCEID
              /opt/aws/bin/cfn-init -v --stack ${StackName} --resource LaunchTemplate --region ${Region}
              /opt/aws/bin/cfn-signal -e 0 --region ${Region} --stack ${StackName} --resource NATAutoScalingGroup
            - RouteTablePrivate: !Ref VpcRouteTablePrivate
              Region: !Ref 'AWS::Region'
              StackName: !Ref 'AWS::StackName'
              EIPAllocationId: !GetAtt 'EIP.AllocationId'
  NATAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt 'LaunchTemplate.LatestVersionNumber'
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: !Sub
            - 'NAT instance ${CidrBlock}'
            - CidrBlock: !Ref VpcCidrBlock
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref VpcSubnetPublic
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
Outputs:
  IPAddress:
    Description: 'The public IP address of the NAT instance.'
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'
  SecurityGroupId:
    Description: 'The security group used to manage access to nat instance.'
    Value: !Ref NATSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
